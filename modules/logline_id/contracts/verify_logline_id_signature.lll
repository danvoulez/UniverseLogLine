contract verify_logline_id_signature {
  flow: "identity.verify_signature",
  
  metadata: {
    name: "Verificação de Assinatura LogLine ID",
    description: "Verifica assinatura digital usando LogLine ID e chave pública",
    version: "1.0.0",
    author: "logline-system"
  },
  
  input: {
    logline_id: {
      type: "string",
      required: true,
      pattern: "^logline-id://[a-zA-Z0-9_-]+/[a-zA-Z0-9_@.-]+$",
      description: "LogLine ID do signatário"
    },
    
    payload: {
      type: "string",
      required: true,
      description: "Dados originais que foram assinados (base64 ou hex)"
    },
    
    signature: {
      type: "string", 
      required: true,
      pattern: "^[a-zA-Z0-9+/=]+$",
      description: "Assinatura digital em base64"
    },
    
    signature_algorithm: {
      type: "enum",
      options: ["ed25519", "secp256k1", "rsa2048"],
      default: "ed25519",
      description: "Algoritmo de assinatura utilizada"
    },
    
    timestamp_tolerance: {
      type: "integer",
      default: 300,
      min: 0,
      max: 3600,
      description: "Tolerância de timestamp em segundos (para payload com timestamp)"
    },
    
    verification_context: {
      type: "object",
      required: false,
      properties: {
        expected_contract: "string",
        expected_span_type: "string",
        require_fresh_signature: "boolean",
        check_revocation_status: "boolean"
      },
      description: "Contexto adicional para verificação"
    }
  },
  
  output: {
    signature_valid: {
      type: "boolean",
      description: "Indica se a assinatura é válida"
    },
    
    identity_status: {
      type: "enum",
      options: ["active", "suspended", "ghost", "revoked"],
      description: "Status atual da identidade"
    },
    
    public_key_used: {
      type: "string",
      description: "Chave pública utilizada na verificação"
    },
    
    verification_timestamp: {
      type: "string",
      format: "date-time",
      description: "Timestamp da verificação"
    },
    
    trust_score: {
      type: "number",
      min: 0.0,
      max: 1.0,
      description: "Pontuação de confiança da identidade"
    },
    
    verification_details: {
      type: "object",
      properties: {
        algorithm_used: "string",
        key_strength: "integer",
        signature_fresh: "boolean",
        identity_verified: "boolean",
        revocation_checked: "boolean"
      },
      description: "Detalhes técnicos da verificação"
    },
    
    warnings: {
      type: "list",
      items: "string",
      description: "Avisos sobre a verificação"
    }
  },
  
  logic: {
    validation: [
      "validate_logline_id_format(logline_id)",
      "validate_signature_format(signature, signature_algorithm)",
      "validate_payload_format(payload)",
      "check_identity_exists(logline_id)",
      "check_identity_not_revoked(logline_id)"
    ],
    
    execution: [
      "load_identity_record(logline_id)",
      "extract_public_key(logline_id)",
      "decode_signature(signature)",
      "decode_payload(payload)",
      "verify_cryptographic_signature(public_key, payload, signature)",
      "check_timestamp_validity(payload, timestamp_tolerance)",
      "calculate_trust_score(logline_id)",
      "check_revocation_status(logline_id)",
      "validate_verification_context(verification_context)",
      "emit_verification_span(logline_id, signature_valid, verification_details)"
    ],
    
    error_handling: [
      "handle_identity_not_found(logline_id)",
      "handle_invalid_signature_format(signature)",
      "handle_cryptographic_failure(verification_error)",
      "handle_revoked_identity(logline_id)",
      "emit_verification_failed_span(logline_id, error_reason)"
    ]
  },
  
  enforcement: {
    pre_conditions: [
      "logline_id.format_valid == true",
      "signature.format_valid == true", 
      "payload.not_empty == true"
    ],
    
    post_conditions: [
      "verification_result.recorded == true",
      "verification_span.emitted == true",
      "trust_score.calculated == true"
    ],
    
    security: [
      "audit_all_verifications()",
      "rate_limit_verifications(1000_per_minute)",
      "detect_verification_patterns()",
      "log_suspicious_activity()"
    ],
    
    performance: [
      "verification_time < 100ms",
      "concurrent_verifications < 50",
      "cache_public_keys(5_minutes)"
    ]
  },
  
  algorithms: {
    ed25519: {
      key_size: 32,
      signature_size: 64,
      implementation: "ed25519_dalek",
      security_level: "high"
    },
    
    secp256k1: {
      key_size: 32,
      signature_size: 64,
      implementation: "secp256k1",
      security_level: "high"
    },
    
    rsa2048: {
      key_size: 256,
      signature_size: 256,
      implementation: "rsa",
      security_level: "medium"
    }
  },
  
  trust_calculation: {
    factors: [
      "identity_age_bonus(identity.created_at)",
      "signature_count_bonus(identity.signatures_made)",
      "verification_success_rate(identity.verification_history)",
      "network_endorsements(identity.endorsements)",
      "revocation_history_penalty(identity.revocations)"
    ],
    
    formula: "base_trust * age_factor * activity_factor * reputation_factor - penalties"
  },
  
  examples: [
    {
      name: "Verificação Simples Válida",
      input: {
        logline_id: "logline-id://macmini-loja/danvoulez",
        payload: "dGVzdCBtZXNzYWdl", # "test message" em base64
        signature: "A1B2C3D4E5F6789ABCDEF...",
        signature_algorithm: "ed25519"
      },
      expected_output: {
        signature_valid: true,
        identity_status: "active",
        trust_score: 0.95,
        verification_details: {
          algorithm_used: "ed25519",
          key_strength: 256,
          signature_fresh: true,
          identity_verified: true
        }
      }
    },
    
    {
      name: "Verificação com Contexto de Contrato",
      input: {
        logline_id: "logline-id://macmini-dan/agente.ai",
        payload: "Y29udHJhdG8gZGUgdGVzdGU=",
        signature: "X9Y8Z7W6V5U4T3S2R1...",
        signature_algorithm: "ed25519",
        verification_context: {
          expected_contract: "identity.register",
          require_fresh_signature: true,
          check_revocation_status: true
        }
      },
      expected_output: {
        signature_valid: true,
        identity_status: "active",
        trust_score: 0.87,
        verification_details: {
          algorithm_used: "ed25519",
          signature_fresh: true,
          identity_verified: true,
          revocation_checked: true
        }
      }
    },
    
    {
      name: "Verificação Falha - Identidade Revogada",
      input: {
        logline_id: "logline-id://compromised-node/bad.actor",
        payload: "bWFsaWNpb3VzIGRhdGE=",
        signature: "INVALID_SIGNATURE_123..."
      },
      expected_output: {
        signature_valid: false,
        identity_status: "revoked",
        trust_score: 0.0,
        warnings: [
          "Identity has been revoked",
          "Signature verification failed",
          "Potentially malicious activity detected"
        ]
      }
    }
  ]
}