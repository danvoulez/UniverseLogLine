contract identity.register {
  flow: "identity.register",
  
  metadata: {
    name: "Registro de Identidade LogLine",
    description: "Registra nova identidade no sistema computável federado",
    version: "1.0.0",
    author: "logline-system"
  },
  
  input: {
    alias: {
      type: "string",
      required: true,
      pattern: "^@?[a-zA-Z0-9_.-]+$",
      max_length: 50,
      description: "Nome amigável (ex: @danvoulez, @rafa.admin)"
    },
    
    owner_type: {
      type: "enum",
      options: ["human", "agent", "node", "ghost"],
      required: true,
      description: "Tipo de proprietário da identidade"
    },
    
    roles: {
      type: "list",
      items: {
        type: "enum",
        options: ["founder", "admin", "validator", "user", "observer", "llm", "ghost"]
      },
      default: ["user"],
      description: "Papéis computáveis no sistema"
    },
    
    public_key: {
      type: "string",
      required: true,
      pattern: "^[a-zA-Z0-9+/=]+$",
      description: "Chave pública ed25519 em base64"
    },
    
    node_name: {
      type: "string", 
      required: true,
      pattern: "^[a-zA-Z0-9_-]+$",
      description: "Nome do nó emissor"
    },
    
    federation_level: {
      type: "enum",
      options: ["local", "federated", "public"],
      default: "federated",
      description: "Nível de federação da identidade"
    },
    
    biometria: {
      type: "object",
      required: false,
      properties: {
        fingerprint_hash: "string",
        face_embedding: "string", 
        voice_signature: "string"
      },
      description: "Dados biométricos opcionais"
    },
    
    rfid_tag: {
      type: "string",
      required: false,
      pattern: "^[0-9A-F]{8,16}$",
      description: "Tag RFID associada"
    }
  },
  
  output: {
    success: {
      type: "boolean",
      description: "Indica se o registro foi bem-sucedido"
    },
    
    logline_id: {
      type: "string",
      pattern: "^logline-id://[a-zA-Z0-9_-]+/[a-zA-Z0-9_@.-]+$",
      description: "Identificador único gerado"
    },
    
    issued_at: {
      type: "string",
      format: "date-time",
      description: "Timestamp de emissão"
    },
    
    capabilities: {
      type: "list",
      items: "string",
      description: "Capacidades atribuídas à identidade"
    },
    
    receipt_id: {
      type: "string",
      description: "ID do recibo de emissão"
    }
  },
  
  logic: {
    validation: [
      "validate_alias_uniqueness(alias, node_name)",
      "validate_public_key_format(public_key)",
      "validate_roles_authorization(roles, executor)",
      "validate_node_authority(node_name, executor)"
    ],
    
    execution: [
      "generate_uuid()",
      "create_logline_id(node_name, alias, uuid)",
      "assign_capabilities_by_roles(roles)",
      "store_identity_record(logline_id, input, capabilities)",
      "emit_identity_issued_receipt(logline_id, input, capabilities)",
      "log_registration_span(logline_id, executor)"
    ],
    
    rollback: [
      "delete_identity_record(logline_id)",
      "revoke_capabilities(logline_id)",
      "emit_registration_failed_span(alias, reason)"
    ]
  },
  
  enforcement: {
    pre_conditions: [
      "executor.can_register_identity == true",
      "alias.not_exists_in_node(node_name)",
      "public_key.is_valid_ed25519()",
      "node_name.is_authorized_issuer()"
    ],
    
    post_conditions: [
      "logline_id.exists_in_registry()",
      "identity_receipt.exists()",
      "capabilities.match_roles(roles)"
    ],
    
    security: [
      "require_signature_verification(executor)",
      "rate_limit_per_node(10_per_hour)",
      "audit_all_registrations()"
    ]
  },
  
  examples: [
    {
      name: "Registro Humano Fundador",
      input: {
        alias: "@danvoulez",
        owner_type: "human",
        roles: ["founder", "admin"],
        public_key: "A1B2C3D4E5F6789...",
        node_name: "macmini-loja",
        federation_level: "public"
      },
      expected_output: {
        success: true,
        logline_id: "logline-id://macmini-loja/danvoulez",
        capabilities: ["sign_contracts", "create_spans", "manage_grammar", "register_identities"]
      }
    },
    
    {
      name: "Registro Agente LLM",
      input: {
        alias: "@gpt-assistant",
        owner_type: "agent", 
        roles: ["llm"],
        public_key: "X9Y8Z7W6V5U4T3...",
        node_name: "macmini-dan",
        federation_level: "federated"
      },
      expected_output: {
        success: true,
        logline_id: "logline-id://macmini-dan/gpt-assistant",
        capabilities: ["create_spans", "execute_approved_contracts"]
      }
    }
  ]
}