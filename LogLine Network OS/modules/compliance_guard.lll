module compliance_guard
version: "1.3.0"
use core_schema as core
use edge_connectivity as edge
use node_registry as reg
use timeline_logger as tl

entity ComplianceReport
  key: report_id (uuid)
  properties:
    - tenant_id: string
    - report_id: uuid
    - node_id: string
    - risk: core.RiskLevel
    - findings: list[string]
    - created_at: core.datetime

flow validate_node
  inputs: tenant_id, node_id
  outputs: ComplianceReport
  steps:
    - let findings = []
    - if not exists edge.Link where (from_node==node_id or to_node==node_id) and secure==true
        then push findings += "no_secure_link"
    - if (select reg.Node where node_id==node_id).ram_free_mb < 512
        then push findings += "low_ram_free"
    - let risk = case length(findings) when 0 -> low when 1 -> medium when 2 -> high else critical
    - let rep = create ComplianceReport { tenant_id, report_id: uuid(), node_id, risk, findings, created_at: now() }
    - tl.log_event(tenant_id, "compliance.report", rep)
    - return rep
