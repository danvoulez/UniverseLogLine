module test_spec_v4
version: "1.0.0"

use core_schema as core
use id_orchestration as idm
use consensus_engine as ce
use smart_contracts as sc
use federation_bridge as fb

test "consensus + wasm + federation end-to-end"
  arrange:
    - let tenant = "voulezvous"
    - let ids = [uuid(), uuid(), uuid(), uuid()]
    - for i in 0..3: create idm.LogLineID { id: ids[i], tenant_id: tenant, passkey:"pk", device_type: mac, created_at: now() }
    - let vset = create ce.ValidatorSet { tenant_id: tenant, set_id: uuid(), validators: map(ids, {id: _}), threshold: 0.75, pqc_required: true }
  act:
    - let round = ce.byzantine_consensus(tenant, {kv:"state=ok"}, vset.set_id)
    - let cc = sc.deploy_contract(tenant, "owner://test", "<wasm>", {counter:0})
    - let out = sc.invoke_contract(tenant, cc.contract_id, "inc", {by: 2})
    - let n1 = create fb.FederatedNetwork { tenant_id: tenant, network_id: uuid(), root_authority: {id: ids[0]}, member_nodes: map(ids, {id: _}), cross_chain_enabled: true }
    - let n2 = create fb.FederatedNetwork { tenant_id: tenant, network_id: uuid(), root_authority: {id: ids[1]}, member_nodes: map(ids, {id: _}), cross_chain_enabled: true }
    - let fed = fb.federate_networks(tenant, n1, n2)
  assert:
    - expect round.finalized == true
    - expect out != null
    - expect fed != null
