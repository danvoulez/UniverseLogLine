module test_spec
version: "1.0.0"
use core_schema as core
use node_registry as reg
use resource_allocator as ra
use processing_distributor as pd

test "tenant lifecycle + node register + schedule"
  arrange:
    - let t = create core.Tenant { tenant_id: "voulezvous", display_name: "VoulezVous", primary_color: "#222", active: true, created_at: now() }
    - let id = uuid()
    - create id_orchestration.LogLineID { id, tenant_id: t.tenant_id, passkey: "pk", device_type: mac, created_at: now() }
    - reg.register_node(t.tenant_id, id, { label: "macmini16-dan", hostname: "macmini", ip:"10.0.0.2", mac:"aa:bb", ram_gb:32, cores:8, disk_gb:2000, os: macos, net_score: 8 })
    - patch reg.Node set { cpu_free: 6, ram_free_mb: 20000 } where node_id="logline-id://macmini16-dan" and tenant_id=t.tenant_id
    - let c = create core.Contract { contract_id: uuid(), tenant_id: t.tenant_id, workflow: "llm_folding", priority: high, requirements: { cpu_cores: 4, ram_gb: 8 }, created_at: now(), ttl: "10m", state: queued }
  act:
    - let node = ra.pick_node_for_contract(t.tenant_id, c)
    - pd.dispatch_task(t.tenant_id, c)
  assert:
    - expect node.node_id == "logline-id://macmini16-dan"
    - expect exists processing_distributor.CpuSpan where contract_id=c.contract_id and status=="running"
