module ghost_protocol
version: "1.0.0"

use core_schema as core
use id_orchestration as idm
use edge_connectivity as edge
use secrets_vault as vault
use timeline_logger as tl

enum TraceLevel [none, minimal, forensic]

entity GhostSession
  key: session_id (uuid)
  properties:
    - tenant_id: string
    - session_id: uuid
    - ghost_id: idm.LogLineID
    - ephemeral_keys: list[pubkey]
    - trace_level: TraceLevel = minimal
    - ttl_seconds: int = 300
    - started_at: core.datetime
    - expires_at: core.datetime

flow activate_ghost_mode
  inputs: tenant_id, ghost_id (idm.LogLineID), privacy_level (TraceLevel)
  outputs: GhostSession
  steps:
    - require ghost_id.ghost_mode == true else raise "not_ghost_capable"
    - let eph = [gen_pubkey(), gen_pubkey()]
    - let sess = create GhostSession { tenant_id, session_id: uuid(), ghost_id, ephemeral_keys: eph, trace_level: privacy_level, ttl_seconds: 300, started_at: now(), expires_at: now()+300s }
    - edge.establish_link(tenant_id, ghost_id.id, ghost_id.id, wireguard)
    - if privacy_level == none: tl.log_event(tenant_id, "ghost.started", { session_id: sess.session_id })
    - return sess

policy cleanup_on_expire
  frequency: every 10s
  action:
    - for each GhostSession where now() >= expires_at:
        revoke_keys(self.ephemeral_keys)
        delete self
