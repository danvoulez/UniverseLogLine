module node_registry
version: "2.0.0"
use core_schema as core
use id_orchestration as idmod

entity Node
  key: node_id (string)
  properties:
    - tenant_id: string
    - node_id: string
    - logline_ref: idmod.LogLineID
    - hostname: string
    - ip: string
    - mac_address: string
    - tailscale_fallback: bool = false
    - tags: list[string] = []
    - memory_capacity_gb: float
    - cpu_cores: int
    - disk_gb: float
    - os_type: core.OSType
    - network_score: int = 10
    - cpu_free: int = 0
    - ram_free_mb: int = 0
    - gpu_free: int = 0
    - last_seen: core.datetime?

index idx_tenant_node on Node(tenant_id, node_id)

flow register_node
  inputs: tenant_id, logline_id, hardware_report
  outputs: Node
  steps:
    - ensure exists idmod.LogLineID where id=logline_id and tenant_id=tenant_id
    - upsert Node {
        tenant_id,
        node_id: "logline-id://" + hardware_report.label,
        logline_ref: logline_id,
        hostname: hardware_report.hostname,
        ip: hardware_report.ip,
        mac_address: hardware_report.mac,
        memory_capacity_gb: hardware_report.ram_gb,
        cpu_cores: hardware_report.cores,
        disk_gb: hardware_report.disk_gb,
        os_type: hardware_report.os,
        network_score: hardware_report.net_score,
        gpu_free: hardware_report.gpu_count or 0
      }
    - emit span "node.registered" attrs { tenant_id, node_id }

flow heartbeat
  inputs: tenant_id, node_id, cpu_free, ram_free_mb, gpu_free?
  steps:
    - patch Node where tenant_id=tenant_id and node_id=node_id set { cpu_free, ram_free_mb, gpu_free: gpu_free or gpu_free, last_seen: now() }
    - emit span "node.heartbeat" attrs { tenant_id, node_id, cpu_free, ram_free_mb, gpu_free: gpu_free or 0 }
